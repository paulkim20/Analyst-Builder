-- Senior Citizen Discount
-- If a customer is 55 or above they qualify for the senior citizen discount. Check which customers qualify.
-- Assume the current date 1/1/2023.
SELECT customer_id 
FROM customers
WHERE TIMESTAMPDIFF(YEAR, birth_date, '2023-01-01') >= 55
ORDER BY customer_id ASC
-- OUTPUT customer_id who qualify for discount ASC order

-- LinkedIn Famous
-- Write a query to determine the popularity of a post on LinkedIn
-- Popularity is defined by number of actions (likes, comments, shares, etc.) divided by the number impressions the post received * 100.
-- If the post receives a score higher than 1 it was very popular.
SELECT post_id, (actions / impressions) * 100 AS popularity_score
FROM linkedin_posts
WHERE (actions / impressions) * 100 > 1
ORDER BY popularity_score DESC
-- OUTPUT ID and popularity_score
-- ORDER BY popularity DESC

-- Company Wide Increase
-- If our company hits its yearly targets, every employee receives a salary increase depending on what level you are in the company.
-- Give each Employee who is a level 1 a 10% increase, level 2 a 15% increase, and level 3 a 200% increase.
SELECT *, CASE
  WHEN pay_level = 1 THEN salary * 1.1
  WHEN pay_level = 2 THEN salary * 1.15
  WHEN pay_level = 3 THEN salary * 3
  ELSE salary
END as new_salary
FROM employees
-- OUTPUT all columns, including a new column called "new_salary"

-- Media Addicts
-- Write a query to find the people who spent a higher than average amount of time on social media.
SELECT first_name
FROM users
WHERE user_id IN (
    SELECT user_id
    FROM user_time
    WHERE media_time_minutes > (
      SELECT AVG(media_time_minutes)
      FROM user_time
  )
)
ORDER BY first_name;
-- OUTPUT first_name ASC for alphabetical order
-- Multiple WHERE statements will have SELECT statements to join the other table

-- Direct Reports
-- Write a query to determine how many direct reports each Manager has.
SELECT dr2.employee_id manager_id, dr2.position manager_title, COUNT(dr1.employee_id) AS direct_report 
FROM direct_reports dr1
  JOIN direct_reports dr2
    ON dr1.managers_id = dr2.employee_id
WHERE dr2.position LIKE '%Manager%'
GROUP BY manager_id, manager_title;
-- OUTPUT Manager ID, Manager Title, and the number of direct reports
-- Filter on managers
-- GROUP BY manager's information 
